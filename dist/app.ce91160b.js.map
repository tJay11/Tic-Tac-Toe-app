{"version":3,"sources":["app.ts"],"names":[],"mappings":";AAqGC,IAjFG,EAiFH,EAAA,MAAA,KAAA,eAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAnGK,EAAgB,CAClB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEL,EAAkB,IAClB,EAAkB,SAClB,EAAQ,SAAS,eAAe,SAChC,EAAa,SAAS,eAAe,eACrC,EAAa,SAAS,eAAe,eACrC,EAAe,SAAS,iBAAiB,eACzC,EAAgB,SAAS,cAAc,2BAU7C,SAAS,IACL,GAAa,EACb,IACA,EAAa,QAAQ,SAAA,GACjB,EAAK,UAAU,OAAO,GACtB,EAAK,UAAU,OAAO,GACtB,EAAK,oBAAoB,QAAS,GAClC,EAAK,iBAAiB,QAAS,EAAa,CAAC,MAAM,MAEvD,EAAW,UAAU,OAAO,QAIhC,SAAS,EAAY,GAGX,IAAA,EAAO,EAAE,OACT,EAAe,EAAa,EAAU,EAC5C,EAAU,EAAM,GACZ,EAAS,GACT,GAAQ,GACH,IACL,GAAQ,IAER,IACA,KAIR,SAAS,EAAQ,GAET,EAAc,UADd,EAC0B,SAEA,EAAa,aAAe,aAE1D,EAAW,UAAU,IAAI,QAG7B,SAAS,IACE,OAAA,EAAA,GAAI,GAAc,MAAM,SAAA,GAEpB,OAAA,EAAK,UAAU,SAAS,IAC/B,EAAK,UAAU,SAAS,KAIhC,SAAS,EAAU,EAAM,GACrB,EAAK,UAAU,IAAI,GAGvB,SAAS,IACL,GAAc,EAGlB,SAAS,IACL,EAAM,UAAU,OAAO,GACvB,EAAM,UAAU,OAAO,GAEpB,EACC,EAAM,UAAU,IAAI,GAEpB,EAAM,UAAU,IAAI,GAI5B,SAAS,EAAS,GACP,OAAA,EAAc,KAAK,SAAA,GAEf,OAAA,EAAY,MAAM,SAAA,GACd,OAAA,EAAa,GAAO,UAAU,SAAS,OA1E1D,IAEA,EAAW,iBAAiB,QAAS","file":"app.ce91160b.js","sourceRoot":"..\\src","sourcesContent":["\r\n/*---Global variables---*/\r\nconst winning_combo = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n]\r\nconst X_class: string = 'x';\r\nconst O_class: string = 'circle'\r\nconst board = document.getElementById('board');\r\nconst winningMsg = document.getElementById('winning-msg');\r\nconst restartBtn = document.getElementById('restart-btn');\r\nconst cellElements = document.querySelectorAll('[data-cell]');\r\nconst winningMsgTxt = document.querySelector('[data-winning-msg-text]');\r\n\r\nlet circleTurn: boolean; /*--needed to know whose turn it is--*/\r\n/*---End Global Variables----*/\r\n\r\nstartGame()\r\n\r\nrestartBtn.addEventListener('click', startGame) /*--for the restartBtm to work you'd need to remove the classes (X, O) and event\r\nlistener shown in the startGame function--*/\r\n\r\nfunction startGame() {\r\n    circleTurn = false;\r\n    boardHoverClass();\r\n    cellElements.forEach(cell => { /*--the forEach method loops through each cell=any name and shows an arrow function--*/\r\n        cell.classList.remove(X_class);\r\n        cell.classList.remove(O_class);\r\n        cell.removeEventListener('click', handleClick);\r\n        cell.addEventListener('click', handleClick, {once: true}) /*--{once: true} ensures that a cell can be clicked only once---*/\r\n    })\r\n    winningMsg.classList.remove('show')\r\n}\r\n\r\n\r\nfunction handleClick(e) { /*--this is the main function of the game,.. and it handles the clicks and contains other functions.........\r\n    (for this game to work you need to check for Win, Draw, Switching Turns and Hovering over the cells)---*/\r\n\r\n    const cell = e.target; /*---the e argument is needed to be able to target the specific cell----*/\r\n    const currentClass = circleTurn ? O_class : X_class; /*--if its circles turn return O_class else X_class---short form of conditional---*/\r\n    placeMark(cell, currentClass);\r\n    if (checkWin(currentClass)) {\r\n        endGame(false);\r\n    }else if(isDraw()) {\r\n        endGame(true);\r\n    }else {\r\n        switchTurns();\r\n        boardHoverClass();\r\n    }\r\n}\r\n\r\nfunction endGame(draw) { /*---displays if the game iS a Draw or Win---*/\r\n    if (draw) {\r\n        winningMsgTxt.innerHTML = \"Draw😢\"\r\n    }else {\r\n        winningMsgTxt.innerHTML = circleTurn ? \"O's Wins😁\" : \"X's Wins😁\";\r\n    }\r\n    winningMsg.classList.add('show')\r\n}\r\n\r\nfunction isDraw() {\r\n    return [...cellElements].every(cell => {  /*---the cellElements cant take an every method since its not a list so you\r\n         destructure itb by placing it in [...](list form)--*/\r\n        return cell.classList.contains(X_class) ||\r\n        cell.classList.contains(O_class)\r\n    })\r\n}\r\n\r\nfunction placeMark(cell, currentClass: string) { /*---this function places the X or O in the cells---*/\r\n    cell.classList.add(currentClass);\r\n}\r\n\r\nfunction switchTurns(){\r\n    circleTurn = !circleTurn; /*---this, !circleTurn, sets it to the opposite of circleTurn---*/\r\n}\r\n\r\nfunction boardHoverClass() {\r\n    board.classList.remove(X_class); /*---removing the classes on the board to make sure there is no class--*/\r\n    board.classList.remove(O_class);\r\n\r\n    if(circleTurn) {\r\n        board.classList.add(O_class);/*---adding the classes based on the player turn--*/\r\n    }else {\r\n        board.classList.add(X_class);\r\n    }\r\n}\r\n\r\nfunction checkWin(currentClass) { /*--check all the winning combinations to see if some are met by the current combinations---*/\r\n    return winning_combo.some(combination => { /*--the .some method returns true if any of the values inside are true--\r\n        --which will loop over all the different combinations--*/\r\n        return combination.every(index => { /*---.every method here makes sure that every element has the same class--*/\r\n            return cellElements[index].classList.contains(currentClass);/*--if the currentClass is in all three of the elements\r\n            inside the combination then there is a winner--*/\r\n        })\r\n    })\r\n}"]}